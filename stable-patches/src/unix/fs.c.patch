diff --git a/src/unix/fs.c b/src/unix/fs.c
index 717f3fab..bf6e3088 100644
--- a/src/unix/fs.c
+++ b/src/unix/fs.c
@@ -83,6 +83,10 @@
 # include <sys/statfs.h>
 #endif
 
+#if defined(__MVS__)
+#include "zos-base.h"
+#endif
+
 #if defined(_AIX) && _XOPEN_SOURCE <= 600
 extern char *mkdtemp(char *template); /* See issue #740 on AIX < 7 */
 #endif
@@ -236,8 +240,20 @@ static struct timespec uv__fs_to_timespec(double time) {
   }
   return ts;
 }
-#endif
+#endif 
 
+#if defined(__MVS__)
+static struct timeval uv__fs_to_timeval(double time) {
+  struct timeval tv;
+  tv.tv_sec  = time;
+  tv.tv_usec = (time - tv.tv_sec) * 1e6;
+  if (tv.tv_usec < 0) {
+    tv.tv_usec += 1e6;
+    tv.tv_sec -= 1;
+  }
+  return tv;
+}
+#endif
 
 static ssize_t uv__fs_futime(uv_fs_t* req) {
 #if defined(__APPLE__)                                                        \
@@ -253,14 +269,11 @@ static ssize_t uv__fs_futime(uv_fs_t* req) {
   ts[0] = uv__fs_to_timespec(req->atime);
   ts[1] = uv__fs_to_timespec(req->mtime);
   return futimens(req->file, ts);
-#elif defined(__MVS__)
-  attrib_t atr;
-  memset(&atr, 0, sizeof(atr));
-  atr.att_mtimechg = 1;
-  atr.att_atimechg = 1;
-  atr.att_mtime = req->mtime;
-  atr.att_atime = req->atime;
-  return __fchattr(req->file, &atr, sizeof(atr));
+#elif defined(__MVS__)  
+  struct timeval tv[2];
+  tv[0] = uv__fs_to_timeval(req->atime);
+  tv[1] = uv__fs_to_timeval(req->mtime);
+  return futimes(req->file, tv);
 #else
   errno = ENOSYS;
   return -1;
@@ -273,7 +286,10 @@ static ssize_t uv__fs_mkdtemp(uv_fs_t* req) {
 }
 
 
+#if !defined(__MVS__) || (__EDC_TARGET > 0x42040000)
+/* warning: unused variable on z/OS 2.4 and prior */
 static int (*uv__mkostemp)(char*, int);
+#endif
 
 
 static void uv__mkostemp_initonce(void) {
@@ -765,11 +781,7 @@ static ssize_t uv__fs_readlink(uv_fs_t* req) {
     return -1;
   }
 
-#if defined(__MVS__)
-  len = os390_readlink(req->path, buf, maxlen);
-#else
   len = readlink(req->path, buf, maxlen);
-#endif
 
   if (len == -1) {
     uv__free(buf);
@@ -1228,7 +1240,11 @@ static ssize_t uv__fs_copyfile(uv_fs_t* req) {
   uv_file dstfd;
   struct stat src_statsbuf;
   struct stat dst_statsbuf;
+#ifdef __MVS__
+  struct timeval times[2];
+#elif
   struct timespec times[2];
+#endif
   int dst_flags;
   int result;
   int err;
@@ -1317,12 +1333,21 @@ static ssize_t uv__fs_copyfile(uv_fs_t* req) {
   times[0].tv_nsec = src_statsbuf.st_atime_n;
   times[1].tv_sec = src_statsbuf.st_mtime;
   times[1].tv_nsec = src_statsbuf.st_mtime_n;
+#elif defined(__MVS__)
+  times[0].tv_sec = src_statsbuf.st_atime;
+  times[0].tv_usec = 0;
+  times[1].tv_sec = src_statsbuf.st_mtime;
+  times[1].tv_usec = 0;
 #else
   times[0] = src_statsbuf.st_atim;
   times[1] = src_statsbuf.st_mtim;
 #endif
 
+#ifdef __MVS__
+  if (futimes(dstfd, times) == -1) {
+#else
   if (futimens(dstfd, times) == -1) {
+#endif
     err = UV__ERR(errno);
     goto out;
   }
@@ -1375,6 +1400,14 @@ static ssize_t uv__fs_copyfile(uv_fs_t* req) {
   }
 #endif
 
+#if defined(__MVS__)
+  /* Copy the source tag to dest. */
+  __setfdccsid(
+    dstfd,
+    (src_statsbuf.st_tag.ft_txtflag << 16) | src_statsbuf.st_tag.ft_ccsid
+  );
+#endif
+
   bytes_to_send = src_statsbuf.st_size;
   in_offset = 0;
   while (bytes_to_send != 0) {
@@ -1505,6 +1538,10 @@ static void uv__to_stat(struct stat* src, uv_stat_t* dst) {
   dst->st_flags = 0;
   dst->st_gen = 0;
 #endif
+
+#ifdef __MVS__
+  dst->st_tag = src->st_tag;
+#endif
 }
 
 
