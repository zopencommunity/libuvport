diff --git a/src/unix/process.c b/src/unix/process.c
index 4812a90f..394ec9d5 100644
--- a/src/unix/process.c
+++ b/src/unix/process.c
@@ -55,7 +55,7 @@
 extern char **environ;
 #endif
 
-#if defined(__linux__)
+#if defined(__linux__) || defined(__MVS__)
 # include <grp.h>
 #endif
 
@@ -224,6 +224,63 @@ static int uv__process_init_stdio(uv_stdio_container_t* container, int fds[2]) {
   }
 }
 
+#ifdef __MVS__
+/* TODO: Revisit once V2R5 is the min supported OS, to use with CLIB Override
+ * in ZOSLIB.
+ */
+static int os390_process_init_stdio(uv_stdio_container_t* container,
+                                    int pipes[2],
+                                    int i) {
+  int err = 0;
+
+  if (container->flags & UV_CREATE_PIPE) {
+    assert(container->data.stream != NULL);
+    if (container->data.stream->type != UV_NAMED_PIPE)
+      return UV_EINVAL;
+
+    if (i <= STDERR_FILENO && !((uv_pipe_t*)(container->data.stream))->ipc)
+      /* Use pipes on z/OS for stdio because:
+       * 1. socketpairs experience issues when dup'ing stderr.
+       * 2. socketpairs do not support ASCII/EBCDIC auto-conversion
+       *    using the ccsid tag below z/OS 3.1.
+       */
+      err = uv__make_pipe(pipes, 0);
+    else
+      /* Continue using socket pairs for IPC pipes since data is ensured to be
+       * in ASCII and no autoconvert facilities are required below z/OS 3.1.
+       */
+      err = uv_socketpair(SOCK_STREAM, 0, pipes, 0, 0);
+  } else
+    err = uv__process_init_stdio(container, pipes);
+
+  /* Since pipes are uni-directional, install stdin backwards so the right ends
+   * are dup'ed and closed appropiately.
+   */
+  if (i == STDIN_FILENO &&
+      (container->flags & (UV_INHERIT_FD | UV_INHERIT_STREAM)) == 0) {
+    int _t = pipes[0];
+    pipes[0] = pipes[1];
+    pipes[1] = _t;
+  }
+
+  /* Allow for auto-conversion between ASCII <-> EBCDIC processes. */
+  if ((i == STDOUT_FILENO || i == STDERR_FILENO) && !isatty(pipes[0])) {
+    if ((container->flags & UV_CREATE_PIPE) &&
+        ((uv_pipe_t*)(container->data.stream))->ipc) {
+      struct f_cnvrt req = { SETAUTOCVTON, 0, 819 };
+      fcntl(pipes[0], F_CONTROL_CVT, &req);
+    }
+  } else if (i == STDIN_FILENO && !isatty(pipes[1])) {
+    if ((container->flags & UV_CREATE_PIPE) &&
+        ((uv_pipe_t*)(container->data.stream))->ipc) {
+      struct f_cnvrt req = { SETAUTOCVTON, 0, 819 };
+      fcntl(pipes[1], F_CONTROL_CVT, &req);
+    }
+  }
+
+  return err;
+}
+#endif
 
 static int uv__process_open_stream(uv_stdio_container_t* container,
                                    int pipefds[2]) {
@@ -233,7 +290,14 @@ static int uv__process_open_stream(uv_stdio_container_t* container,
   if (!(container->flags & UV_CREATE_PIPE) || pipefds[0] < 0)
     return 0;
 
+#ifdef __MVS__
+  /* Use nocheckstdio because it is possible for a process to close its stdio
+   * fds, resulting in the pipefds to be reassigned to a stdio fd.
+   */
+  err = uv__close_nocheckstdio(pipefds[1]);
+#else
   err = uv__close(pipefds[1]);
+#endif
   if (err != 0)
     abort();
 
@@ -1000,7 +1064,11 @@ int uv_spawn(uv_loop_t* loop,
   }
 
   for (i = 0; i < options->stdio_count; i++) {
+#ifdef __MVS__
+    err = os390_process_init_stdio(options->stdio + i, pipes[i], i);
+#else
     err = uv__process_init_stdio(options->stdio + i, pipes[i]);
+#endif
     if (err)
       goto error;
   }
