diff --git a/src/unix/core.c b/src/unix/core.c
index 965e7f77..3adeaa95 100644
--- a/src/unix/core.c
+++ b/src/unix/core.c
@@ -586,6 +586,9 @@ int uv__accept(int sockfd) {
  * by making the system call directly. Musl libc is unaffected.
  */
 int uv__close_nocancel(int fd) {
+#if defined(__MVS__)
+  SAVE_ERRNO(epoll_file_close(fd));
+#endif
 #if defined(__APPLE__)
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wdollar-in-identifier-extension"
@@ -632,9 +635,6 @@ int uv__close_nocheckstdio(int fd) {
 
 int uv__close(int fd) {
   assert(fd > STDERR_FILENO);  /* Catch stdio close bugs. */
-#if defined(__MVS__)
-  SAVE_ERRNO(epoll_file_close(fd));
-#endif
   return uv__close_nocheckstdio(fd);
 }
 
@@ -994,7 +994,9 @@ int uv_getrusage(uv_rusage_t* rusage) {
 
   if (getrusage(RUSAGE_SELF, &usage))
     return UV__ERR(errno);
-
+#if defined(__MVS__)
+  memset(rusage, 0, sizeof(*rusage));
+#endif
   rusage->ru_utime.tv_sec = usage.ru_utime.tv_sec;
   rusage->ru_utime.tv_usec = usage.ru_utime.tv_usec;
 
@@ -1461,6 +1463,10 @@ int uv_os_setenv(const char* name, const char* value) {
   if (setenv(name, value, 1) != 0)
     return UV__ERR(errno);
 
+#if defined(__MVS__)
+  __update_envar_settings(name);
+#endif
+
   return 0;
 }
 
@@ -1472,6 +1478,10 @@ int uv_os_unsetenv(const char* name) {
   if (unsetenv(name) != 0)
     return UV__ERR(errno);
 
+#if defined(__MVS__)
+  __update_envar_settings(name);
+#endif
+
   return 0;
 }
 
@@ -1565,6 +1575,11 @@ int uv_os_setpriority(uv_pid_t pid, int priority) {
  * So the output parameter priority is actually the nice value.
 */
 int uv_thread_getpriority(uv_thread_t tid, int* priority) {
+#ifdef __MVS__
+  // TODO(gabylb): zos - no pthread_getschedparam() on z/OS.
+  *priority = 0;
+  return 0;
+#else
   int r;
   int policy;
   struct sched_param param;
@@ -1592,6 +1607,7 @@ int uv_thread_getpriority(uv_thread_t tid, int* priority) {
 
   *priority = param.sched_priority;
   return 0;
+#endif
 }
 
 #ifdef __linux__
@@ -1616,6 +1632,10 @@ static int set_nice_for_calling_thread(int priority) {
  * If the function fails, the return value is non-zero.
 */
 int uv_thread_setpriority(uv_thread_t tid, int priority) {
+#ifdef __MVS__
+  // TODO(gabylb): zos - no pthread_setschedparam() on z/OS.
+  return 0;
+#else
   int r;
   int min;
   int max;
@@ -1681,6 +1701,7 @@ int uv_thread_setpriority(uv_thread_t tid, int priority) {
   }
 
   return 0;
+#endif
 }
 
 int uv_os_uname(uv_utsname_t* buffer) {
@@ -1841,8 +1862,10 @@ int uv__search_path(const char* prog, char* buf, size_t* buflen) {
   while (token != NULL) {
     snprintf(trypath, sizeof(trypath) - 1, "%s/%s", token, prog);
     if (realpath(trypath, abspath) == abspath) {
-      /* Check the match is executable */
-      if (access(abspath, X_OK) == 0) {
+      struct stat info;
+      /* Check the match is not a directory, and is executable. */
+      if (stat(abspath, &info) == 0 && !S_ISDIR(info.st_mode) &&
+          access(abspath, X_OK) == 0) {
         abspath_size = strlen(abspath);
 
         *buflen -= 1;
