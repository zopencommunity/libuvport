diff --git a/src/unix/os390-syscalls.c b/src/unix/os390-syscalls.c
index 7f90c270..2612de82 100644
--- a/src/unix/os390-syscalls.c
+++ b/src/unix/os390-syscalls.c
@@ -149,8 +149,22 @@ static void init_message_queue(uv__os390_epoll* lst) {
 
   /* initialize message queue */
   lst->msg_queue = msgget(IPC_PRIVATE, 0600 | IPC_CREAT);
-  if (lst->msg_queue == -1)
+  if (lst->msg_queue == -1) {
+    int failingerrno = errno;
+    perror("msgget");
+    if (failingerrno == ENOSPC) {
+      IPCQPROC info;
+      if (!get_ipcs_overview(&info))
+        fprintf(stderr, "Current number of message queues: %d\n"
+                        "Maximum allowed message queues: %d\n"
+                        "Re-run with export __IPC_CLEANUP=1 or increase "
+                        "system IPCMSGNIDS maximum value\n",
+                        info.overview.ipcqomsgnids,
+                        info.overview.ipcqomsgprivate +
+                        info.overview.ipcqomsgkeyed);
+    }
     abort();
+  }
 
   /*
      On z/OS, the message queue will be affiliated with the process only
@@ -158,12 +172,17 @@ static void init_message_queue(uv__os390_epoll* lst) {
      can be queried for all message queues belonging to our process id.
   */
   msg.header = 1;
-  if (msgsnd(lst->msg_queue, &msg, sizeof(msg.body), 0) != 0)
+  if (msgsnd(lst->msg_queue, &msg, sizeof(msg.body), 0) != 0) {
+    perror("msgsnd");
     abort();
+  }
 
   /* Clean up the dummy message sent above */
-  if (msgrcv(lst->msg_queue, &msg, sizeof(msg.body), 0, 0) != sizeof(msg.body))
+  if (msgrcv(lst->msg_queue,
+             &msg, sizeof(msg.body), 0, 0) != sizeof(msg.body)) {
+    perror("msgrcv");
     abort();
+  }
 }
 
 
@@ -204,9 +223,6 @@ static void epoll_init(void) {
   uv__queue_init(&global_epoll_queue);
   if (uv_mutex_init(&global_epoll_lock))
     abort();
-
-  if (pthread_atfork(&before_fork, &after_fork, &child_fork))
-    abort();
 }
 
 
@@ -240,12 +256,21 @@ int epoll_ctl(uv__os390_epoll* lst,
   uv_mutex_lock(&global_epoll_lock);
 
   if (op == EPOLL_CTL_DEL) {
-    if (fd >= lst->size || lst->items[fd].fd == -1) {
-      uv_mutex_unlock(&global_epoll_lock);
-      errno = ENOENT;
-      return -1;
+    if (event->is_msg) {
+      /* The user has deleted the System V message queue. Highly likely
+       * that the process is being shut down. So stop listening to it.
+       */
+      msgctl(lst->msg_queue, IPC_RMID, NULL);
+      lst->msg_queue = -1;
+      lst->items[lst->size - 1].fd = -1;
+    } else {
+      if (fd >= lst->size || lst->items[fd].fd == -1) {
+        uv_mutex_unlock(&global_epoll_lock);
+        errno = ENOENT;
+        return -1;
+      }
+      lst->items[fd].fd = -1;
     }
-    lst->items[fd].fd = -1;
   } else if (op == EPOLL_CTL_ADD) {
 
     /* Resizing to 'fd + 1' would expand the list to contain at least
@@ -440,97 +465,3 @@ char* mkdtemp(char* path) {
 
   return path;
 }
-
-
-ssize_t os390_readlink(const char* path, char* buf, size_t len) {
-  ssize_t rlen;
-  ssize_t vlen;
-  ssize_t plen;
-  char* delimiter;
-  char old_delim;
-  char* tmpbuf;
-  char realpathstr[PATH_MAX + 1];
-
-  tmpbuf = uv__malloc(len + 1);
-  if (tmpbuf == NULL) {
-    errno = ENOMEM;
-    return -1;
-  }
-
-  rlen = readlink(path, tmpbuf, len);
-  if (rlen < 0) {
-    uv__free(tmpbuf);
-    return rlen;
-  }
-
-  if (rlen < 3 || strncmp("/$", tmpbuf, 2) != 0) {
-    /* Straightforward readlink. */
-    memcpy(buf, tmpbuf, rlen);
-    uv__free(tmpbuf);
-    return rlen;
-  }
-
-  /*
-   * There is a parmlib variable at the beginning
-   * which needs interpretation.
-   */
-  tmpbuf[rlen] = '\0';
-  delimiter = strchr(tmpbuf + 2, '/');
-  if (delimiter == NULL)
-    /* No slash at the end */
-    delimiter = strchr(tmpbuf + 2, '\0');
-
-  /* Read real path of the variable. */
-  old_delim = *delimiter;
-  *delimiter = '\0';
-  if (realpath(tmpbuf, realpathstr) == NULL) {
-    uv__free(tmpbuf);
-    return -1;
-  }
-
-  /* realpathstr is not guaranteed to end with null byte.*/
-  realpathstr[PATH_MAX] = '\0';
-
-  /* Reset the delimiter and fill up the buffer. */
-  *delimiter = old_delim;
-  plen = strlen(delimiter);
-  vlen = strlen(realpathstr);
-  rlen = plen + vlen;
-  if (rlen > len) {
-    uv__free(tmpbuf);
-    errno = ENAMETOOLONG;
-    return -1;
-  }
-  memcpy(buf, realpathstr, vlen);
-  memcpy(buf + vlen, delimiter, plen);
-
-  /* Done using temporary buffer. */
-  uv__free(tmpbuf);
-
-  return rlen;
-}
-
-
-int sem_init(UV_PLATFORM_SEM_T* semid, int pshared, unsigned int value) {
-  UNREACHABLE();
-}
-
-
-int sem_destroy(UV_PLATFORM_SEM_T* semid) {
-  UNREACHABLE();
-}
-
-
-int sem_post(UV_PLATFORM_SEM_T* semid) {
-  UNREACHABLE();
-}
-
-
-int sem_trywait(UV_PLATFORM_SEM_T* semid) {
-  UNREACHABLE();
-}
-
-
-int sem_wait(UV_PLATFORM_SEM_T* semid) {
-  UNREACHABLE();
-}
